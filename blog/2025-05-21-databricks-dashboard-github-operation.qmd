---
title: "Databricks AI/BI ダッシュボードの Git 連携の運用方法"
author: uma-chan
date: 2025-05-21 21:45:51 +0900
date-modified: last-modified
image: "/assets/common/icon_hhkb3_large.jpg"
description: |
  Databricks AI/BI ダッシュボードを Git flow で運用することにした経緯と実際の運用について
categories:
  - "blog"
  - "tech"
  - "tech-data"
---

## 1. はじめに

Databricks のダッシュボードは Git 連携できます！

[GitにおけるDatabricks AI/BIダッシュボードのソース管理 #Databricks_AI_BI - Qiita](https://qiita.com/taka_yayoi/items/af580c4bad7db4aebc38)

バックアップを取り安心したいので必ず導入しましょう。

Git 連携を用いた運用方法について検討したので記事として残します。

## 2. Databricks の Git 連携機能とダッシュボードの相性

Commit & Push とブランチ切り替え以外の操作は結構厳しいです。

JSON形式でウィジェット配置やSQLを管理しているのでコンフリクトが起きた場合の解消が難しいです。

なのでそもそもコンフリクトの起きない運用をしておきたいです。

## 3. Databricks の考えるベストプラクティス

> 自分の開発ブランチで作業するユーザーごとに、リモート Git リポジトリにマップされた個別の Databricks Git フォルダーを使用します 。

<https://docs.databricks.com/aws/ja/repos/git-operations-with-repos#ベスト-プラクティス-git-フォルダーでの共同作業>

そうは言うけれども実際は開発スキルを持たない方がダッシュボードを作成しますよね。

これを守るのは現実的ではないです。

## 4. 実際の運用

共有ワークスペース内に Git フォルダを作成して Git flow で運用しています。

ワークスペースでは常時 develop ブランチ固定で時々 Commit & Push したり main にマージしたりします。

main へのマージは Pull Request 必須という企業も多いと思いますので、その観点でも
Git flow は運用しやすそうです。

これくらいのゆるさで気楽に今後も運用していきます。

```{mermaid}
%%{
    init: {
        'logLevel': 'debug',
        'theme': 'base',
        'themeVariables': {
            'commitLabelFontSize': '14px',
            'tagLabelFontSize': '12px'
        }
    }
}%%
gitGraph LR:
    checkout main
    commit
    branch develop order: 3
    checkout develop
    commit
    commit
    checkout main
    merge develop tag: "25.02"
    checkout develop
    commit
    commit

    branch feature/add-dashboard order: 4
    checkout feature/add-dashboard
    commit
    commit
    checkout develop
    merge feature/add-dashboard

    checkout main
    merge develop tag: "25.05"

    checkout develop
    commit
    commit
    commit
```
