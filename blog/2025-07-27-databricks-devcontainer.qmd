---
title: "Claude Code 対応の Dev Container から Databricks のコンピュートをノートブックのカーネルとして利用する"
author: uma-chan
date: 2025-07-27 01:56:50 +0900
date-modified: last-modified
image: "/assets/common/icon_hhkb3_large.jpg"
description: |
  Claude Code 対応の Dev Container で Databricks のノートブックでもローカル開発環境の AI の恩恵を受けられるようになります
categories:
  - "blog"
  - "tech"
  - "tech-ai"
  - "tech-python"
  - "tech-vscode"
---

## 1. はじめに

DWH サービスが提供するコンピューティングリソースを使用してノートブックで機械学習や分析を行っている方は多いと思います。

そういった方々共通の悩みとして VS Code などのローカル開発環境が利用できない、そして結果的に開発時に AI の恩恵が受けられないことが挙げられると思います。

今回私が今メインで使っている Databricks についてこの悩みを解決する方法を紹介します。

## 2. 対象読者

- Databricks のコンピュートをローカルから利用したい方
- Databricks 上での開発に Claude Code を利用したい方

## 3. 前提知識

### 3.1. Dev Container とは

Dev Container は VS Code でコンテナを開発環境として利用できる便利機能です。

今回 Dev Container 設定で紹介するので整備する方がいればチーム全員に同じ開発環境を提供することができます。

VS Code ではない方も Dev Container CLI を利用することで恩恵を受けることができます。

ちなみに私は VS Code をメインで使用しているわけではないので VS Code 固有の機能は今回あまり多く登場しません。

### 3.2. Claude Code in Dev Container

Claude Code を Dev Container で利用する方法について2通り紹介します。

#### 3.2.1. devcontainer.json の features を利用する

こちらが簡単な方法です。

以下に Anthropic が提供している Dev Container feature を利用する方法が記載されています。

<https://github.com/anthropics/devcontainer-features/blob/main/src/claude-code/README.md>

抜粋すると以下の通りです。

```{.json filename=".devcontainer/devcontainer.json"}
"features": {
    "ghcr.io/devcontainers/features/node:1": {},
    "ghcr.io/anthropics/devcontainer-features/claude-code:1": {}
}
```

#### 3.2.2. Dockerfile を利用する

本家のリファレンス実装を利用する方法です。

以下が Claude Code 向け Dev Container について記載されている公式ドキュメントです。

<https://docs.anthropic.com/en/docs/claude-code/devcontainer>

この中でリファレンス実装として Claude Code 自身の Dev Container 設定が紹介されています。

<https://github.com/anthropics/claude-code/tree/main/.devcontainer>

```{.sh}
.devcontainer
├── devcontainer.json
├── Dockerfile
└── init-firewall.sh
```

このリファレンス実装を参考にしつつ私が使いやすいようにカスタマイズしたものを以下で紹介していきます。

### 3.3. uv とは

今回利用している Python 環境管理ツールです。

<https://github.com/astral-sh/uv>

最低限理解しておくべき要点は以下です。

- uv 自体は Python エコシステムの外にあるツールである
- インストールしたい Python パッケージを `pyproject.toml` で管理する
- `pyproject.toml` のパッケージの依存関係解決結果を `uv.lock` に保存し環境の再現性を担保している

## 4. Dev Container 設定

### 4.1. VS Code 側の準備

Dev Container 拡張をインストールしておく必要があります。

<https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers>

### 4.2. Dockerfile

Anthropic のリファレンス実装をベースにして以下のような Dockerfile を作成しました。

見て分かる通り hadolint で結構指摘が出る書き味ですが、特に信条もないので一旦そのままにしています。

Anthropic の実装が変わったら追従します。

::: {.callout-note appearance="simple" collapse="true"}

#### 4.2.1. `.devcontainer/Dockerfile`

```{.Dockerfile filename=".devcontainer/Dockerfile"}
FROM node:20

ARG TZ
ENV TZ="$TZ"

# Install basic development tools and iptables/ipset
RUN apt update && apt install -y less \
  git \
  procps \
  sudo \
  fzf \
  zsh \
  man-db \
  unzip \
  gnupg2 \
  gh \
  iptables \
  ipset \
  iproute2 \
  dnsutils \
  aggregate \
  jq

# Ensure default node user has access to /usr/local/share
RUN mkdir -p /usr/local/share/npm-global && \
  chown -R node:node /usr/local/share

ARG USERNAME=node

# Persist bash history.
RUN SNIPPET="export PROMPT_COMMAND='history -a' && export HISTFILE=/commandhistory/.bash_history" \
  && mkdir /commandhistory \
  && touch /commandhistory/.bash_history \
  && chown -R $USERNAME /commandhistory

# Set `DEVCONTAINER` environment variable to help with orientation
ENV DEVCONTAINER=true

# Create workspace and config directories and set permissions
RUN mkdir -p /workspace /home/node/.claude && \
  chown -R node:node /workspace /home/node/.claude

WORKDIR /workspace

RUN ARCH=$(dpkg --print-architecture) && \
  wget "https://github.com/dandavison/delta/releases/download/0.18.2/git-delta_0.18.2_${ARCH}.deb" && \
  sudo dpkg -i "git-delta_0.18.2_${ARCH}.deb" && \
  rm "git-delta_0.18.2_${ARCH}.deb"

# Set up non-root user
USER node

# Install global packages
ENV NPM_CONFIG_PREFIX=/usr/local/share/npm-global
ENV PATH=$PATH:/usr/local/share/npm-global/bin

# Set the default shell to zsh rather than sh
ENV SHELL=/bin/zsh

# Default powerline10k theme
RUN sh -c "$(wget -O- https://github.com/deluan/zsh-in-docker/releases/download/v1.2.0/zsh-in-docker.sh)" -- \
  -p git \
  -p fzf \
  -a "source /usr/share/doc/fzf/examples/key-bindings.zsh" \
  -a "source /usr/share/doc/fzf/examples/completion.zsh" \
  -a "export PROMPT_COMMAND='history -a' && export HISTFILE=/commandhistory/.bash_history" \
  -x

# Install Claude
RUN npm install -g @anthropic-ai/claude-code

# Python environment setup (if needed)
# Copy uv binary from official image
COPY --from=ghcr.io/astral-sh/uv:latest /uv /usr/local/bin/uv

USER node
```

Anthropic のリファレンス実装 ([e394b39](https://github.com/anthropics/claude-code/blob/55219b8b4e612b5fc6a85f7dc4eb4382ec4134eb/.devcontainer/Dockerfile)) と比較すると以下のような変更を行っています。

- firewall スクリプト対応部分を削除
- uv インストール部分を追加

```{.diff}
$ diff -u ../../anthropics/claude-code/.devcontainer/Dockerfile .devcontainer/Dockerfile
--- ../../anthropics/claude-code/.devcontainer/Dockerfile       2025-07-26 16:16:50
+++ .devcontainer/Dockerfile    2025-07-26 23:24:59
@@ -69,10 +69,8 @@
 # Install Claude
 RUN npm install -g @anthropic-ai/claude-code

-# Copy and set up firewall script
-COPY init-firewall.sh /usr/local/bin/
-USER root
-RUN chmod +x /usr/local/bin/init-firewall.sh && \
-  echo "node ALL=(root) NOPASSWD: /usr/local/bin/init-firewall.sh" > /etc/sudoers.d/node-firewall && \
-  chmod 0440 /etc/sudoers.d/node-firewall
+# Python environment setup (if needed)
+# Copy uv binary from official image
+COPY --from=ghcr.io/astral-sh/uv:latest /uv /usr/local/bin/uv
+
 USER node
```

:::

### 4.3. devcontainer.json

以下のような `devcontainer.json` を作成しました。

こちらは Anthropic のリファレンス実装に比べると割と変更点が多いです。

::: {.callout-note appearance="simple" collapse="true"}

#### 4.3.1. `.devcontainer/devcontainer.json`

```{.json filename=".devcontainer/devcontainer.json"}
{
    "name": "Claude Code Sandbox",
    "build": {
        "dockerfile": "Dockerfile",
        "args": {
            "TZ": "${localEnv:TZ:Asia/Tokyo}"
        }
    },
    "runArgs": [
        "--cap-add=NET_ADMIN",
        "--cap-add=NET_RAW",
        "--network=host"
    ],
    "customizations": {
        "vscode": {
            "extensions": [
                "editorconfig.editorconfig",
                "ms-python.python",
                "ms-toolsai.jupyter"
            ],
            "settings": {
                "terminal.integrated.defaultProfile.linux": "zsh",
                "terminal.integrated.profiles.linux": {
                    "bash": {
                        "path": "bash",
                        "icon": "terminal-bash"
                    },
                    "zsh": {
                        "path": "zsh"
                    }
                }
            }
        }
    },
    "remoteUser": "node",
    "mounts": [
        "source=${localEnv:CLAUDE_CONFIG_DIR},target=/home/node/.claude,type=bind,consistency=cached",
        "source=${localEnv:HOME}/.config/gh,target=/home/node/.config/gh,type=bind,consistency=cached",
        "source=${localEnv:HOME}/.config/git,target=/home/node/.config/git,type=bind,consistency=cached",
        "source=${localEnv:HOME}/.databrickscfg,target=/home/node/.databrickscfg,type=bind,consistency=cached",
        "source=${localEnv:HOME}/.dbt,target=/home/node/.dbt,type=bind,consistency=cached",
        "source=${localEnv:HOME}/.gitconfig,target=/home/node/.gitconfig,type=bind,consistency=cached",
        "source=${localEnv:HOME}/.ssh,target=/home/node/.ssh,type=bind,consistency=cached",
        "source=claude-code-bashhistory-${devcontainerId},target=/commandhistory,type=volume"
    ],
    "remoteEnv": {
        "CLAUDE_CONFIG_DIR": "/home/node/.claude",
        "NODE_OPTIONS": "--max-old-space-size=4096",
        "POWERLEVEL9K_DISABLE_GITSTATUS": "true",
        "UV_LINK_MODE": "copy"
    },
    "workspaceMount": "source=${localWorkspaceFolder},target=/workspace,type=bind,consistency=delegated",
    "workspaceFolder": "/workspace",
    "postStartCommand": "uv sync --frozen"
}
```

Anthropic のリファレンス実装 ([33e37bd](https://github.com/anthropics/claude-code/blob/55219b8b4e612b5fc6a85f7dc4eb4382ec4134eb/.devcontainer/devcontainer.json)) と比較すると以下のような変更を行っています。

- `runArgs` に `--network=host` を追加
    - Databricks 向け
- VS Code 向け拡張機能を追加
    - `editorconfig.editorconfig`
        - テキストエディタ間での設定を統一する
    - `ms-python.python`
        - 流石に必要
    - `ms-toolsai.jupyter`
        - ノートブックを VS Code で開くために必要
- VS Code 向け Formatter 設定を削除
    - VS Code を使わない人を排除する世界にはしたくないという信条があるので削除しました
- `mounts` に設定ファイル群を追加
    - 以下のツールの設定ファイルをマウントして利用します
        - Claude Code
        - GitHub CLI
        - Git
        - Databricks (認証情報)
        - dbt (認証情報)
        - ssh
- `mounts` の Claude Code 設定分離部分を削除
    - ユーザー設定をマウントして利用したかったので削除しました
- `remoteEnv` に以下の環境変数を追加
    - `CLAUDE_CONFIG_DIR`
        - Claude Code の設定参照箇所の安定化を図る
    - `UV_LINK_MODE`
        - コンテナなので uv のリンクモードを `copy` に設定
:::

## 5. Dev Container 利用方法

## 6. おわりに
