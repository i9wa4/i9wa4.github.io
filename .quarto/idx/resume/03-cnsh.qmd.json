{"title":"職務経歴 株式会社シイエヌエス北海道","markdown":{"yaml":{"title":"職務経歴 株式会社シイエヌエス北海道","date":"last-modified"},"headingText":"1. プロジェクト以外の業務","containsRefs":false,"markdown":"\n\n:会社概要・雇用形態 (2024年時点) {#tbl-company tbl-colwidths=\"[20,80]\"}\n\n|              |                                                                                          |\n| :---         | :---                                                                                     |\n| 事業内容     | アプリケーション開発・インフラ構築事業、クラウド構築事業、データ分析・AI事業、DX支援事業 |\n| 資本金       | 2500万円                                                                                 |\n| 売上高       | 7億5,351万円                                                                             |\n| 従業員数     | 39名                                                                                     |\n| 上場／非上場 | 非上場                                                                                   |\n| 雇用形態     | 正社員                                                                                   |\n| 勤務地       | 北海道札幌市<br>週に約4回リモートワーク実施                                              |\n\n<!--\n**入社動機**\n- 未経験ながら数学的素養を活かしてデータ分析業務に取り組むイメージが湧いたため。\n    - 実際にはデータ分析ではなくデータエンジニアとして案件に入ることになりましたが、面白さを感じられて膨大な知識量が必要でやりがいのある分野だと感じました。\n\n**退職動機**\n- 案件先での業務経験はとても魅力的でしたが、そこでの働く限り会社軸での評価を得られず、昇給・昇進ができないためモチベーションを維持できない状況になりました。\n- たった1年程度の経験でデータ基盤に関して社内で有数の知見を持つ人間となってしまいました。周囲のレベルの高い成長できる環境を選びたいと感じました。\n-->\n\n以下、新しい順にプロジェクトを記載しております。\n\n\n### 1.1. 新卒採用一次選考の面接官対応\n\n- 2024年新卒採用：学生6名分\n- 2025年新卒採用：学生6名分\n\n### 1.2. データ分析業務担当者育成\n\n1. 育成用プログラム進捗管理 (2023/06 - 2023/12)\n    - 利用教材：[データサイエンス100本ノック](https://github.com/The-Japan-DataScientist-Society/100knocks-preprocess)\n    - 育成対象者：7名 (2023年度)\n    - 業務：環境構築手順作成・質疑応答対応・作業進捗管理 (すべて私1名で対応)\n1. ローカル上の環境構築手順の共有 (随時)\n    - 社内 Wiki にて記事作成\n    - 具体例\n        - Amazon Linux (EC2) + Anaconda + PyStan 環境構築\n        - Windows + Anaconda + PyStan 環境構築\n        - Ubuntu (WSL2) + Docker (Dockerfile) + CPython + venv 環境構築\n        - Ubuntu (WSL2) + Docker 環境構築 (データサイエンス100本ノック向け)\n        - Amazon Linux (Cloud9) + pyenv 環境構築\n        - VSCode と Vim での Linter Formatter 導入方法\n1. データ分析関連技術情報共有 (随時)\n    - ニュースサイト・技術ブログ・技術コミュニティにて情報収集し、社内チャットにて随時共有\n\n## 2. 情報通信企業向け 機械学習ワークフローと AI プラットフォーム移管\n\n### 2.1. 概要\n\n- DataRobot 中心で構築していた機械学習ワークフローから Snowpark ML (Snowflake) 中心の構築への移管\n\n### 2.2. 期間\n\n1. [2023/12 - 2024/01] Snowpark ML 事前検証\n1. [2024/02 - 2024/03] 追加調査・ワークフロー設計\n\n### 2.3. 規模・役割\n\n- [2023/12 - 2024/01]\n    - 役割：メンバー\n    - 規模：1名 (私)\n- [2024/02 - 2024/03]\n    - 役割：リーダー\n    - 規模：2名\n        - 自社の若手2名\n\n### 2.4. 担当業務\n\n1. [2023/12 - 2024/01] (私1名) Snowpark ML の事前検証\n1. [2024/02 - 2024/03] (2名) DataRobot から Snowpark ML への移管のための追加調査\n1. [2024/03] (私1名) ワークフロー設計\n\n### 2.5. 機能開発・実装詳細\n\n移管前後の構築詳細は以下の通りです。\n\n- 移管前構築 (AWS MWAA + ECS + DataRobot + Snowflake)\n    - MWAA にてワークフロー管理を行っており DAG ファイルにてジョブを定義し並列処理や直列処理を記述していました。\n    - MWAA KubernetesPodOperator にて利用する ECS イメージを JupyterHub (ノートブック実行環境) でも共有していたため本番と開発でライブラリ依存関係の齟齬がない環境でした。\n    - AI プラットフォームとして DataRobot を採用し、ハイパーパラメータチューニングやモデル評価を全てフルマネージドで実施させていました。ただしコストが嵩む問題がありました。\n- 移管後構築 (AWS SageMaker + Snowpark ML + Snowflake)\n    - AI プラットフォームとして Snowpark ML を採用することとしました。使用感は scikit-learn に近く、ラベルエンコーディング・ハイパーパラメータチューニング・モデル評価を自力で実装する必要があります。\n    - ワークフローは \"SageMaker + Papermill\" でノートブック上での管理となります。\n    - モデルはモデルレジストリ機能にて管理させます。\n    - 他部署 (他の環境) とも共有できるように素朴な実装を目指しました。\n\n### 2.6. 目的・背景\n\n- コスト上の問題から DataRobot の利用を2024年8月に停止するという判断を受けて AI プラットフォームの移行先を探す必要がありました。\n\n### 2.7. 課題\n\n- 移行業務は付加価値を生みづらい都合で移行先調査の優先順位が低くなってしまい、分析基盤管理側の社員も移行先調査がほとんど実施できていない状況でした。\n- Snowpark ML は新しいサービスのため公式ドキュメント以外で参照出来る情報が社内外ともにかなり限られている状況でした。\n\n### 2.8. 工夫した点\n\n- 調査作業での工夫点\n    - 後から続く方が参照しやすいように調査記録を丁寧に取りました。\n        - Snowflake 公式のリポジトリに置かれているサンプルコードや公式ドキュメント・公式ライブラリソースコードのどの部分を参照したか記録に残しました。\n        - 調査記録を客先社内公開済み。\n    - 必要最低限の領域までの調査に留めることで、スケジュールや実装方針について予定より早く合意を取ることができました。\n        - 関係者が多くなるため情報提供をいち早く行うことを優先しました。\n\n### 2.9. 成果\n\n- Snowpark ML の利用は前例が少なかったため Snowflake 社からの個別開示情報などを利用して情報収集と事前検証を行ないました。結果、既存ワークフローに比べてコスト・性能面・セキュリティ面で優位性があることを示し、客先での先行事例を作ることができました。\n    - 価値を生みづらいと見込まれていた移管作業の意義を示したため、注目度を上げ、周囲を巻き込むことに成功しました。客先での社内政治的にも Snowpark ML 導入推進の話を通しやすくなる状況作りに貢献しました。\n- 本プロジェクトではリーダーとして技術調査・スケジュール策定・チームへの作業指示・顧客他部署への情報共有など多様な役割を担うことができました。\n\n### 2.10. 担当フェーズ\n\n- 要件分析\n- 基本設計\n- 詳細設計\n- 開発\n- テスト\n\n### 2.11. 開発環境\n\n- AWS\n    - SageMaker\n    - CodeCommit\n    - Secrets Manager\n- SQL\n    - Snowflake\n- Python 実行環境\n    - SageMaker (conda_python3)\n- AI プラットフォーム\n    - Snowpark ML\n\n## 3. 情報通信企業向け データマート整備\n\n### 3.1. 概要\n\n顧客情報と紐付けて分析や機械学習に利用するための下記特徴量の作成\n\n- ポイントサービス加盟店と顧客推定住所との距離\n- ポイントサービス詳細情報\n- 決済情報\n- 様々な特徴量を次元圧縮して生成する特徴量\n- 行動履歴からルールベースで推定されたライブイベント実績\n\n### 3.2. 期間\n\n1. [2023/04 - 2023/05] ポイントサービス加盟店と顧客推定住所との距離\n1. [2023/06 - 2023/07] 決済情報\n1. [2023/08 - 2023/09] 行動履歴からルールベースで推定されたライフイベント実績\n1. [2023/10 - 2023/12] 様々な特徴量を次元圧縮して生成する特徴量\n1. [2024/01 - 2024/03] ポイントサービス詳細情報\n\n### 3.3. 規模・役割\n\n- 役割：サブリーダー\n- 規模：4名\n\n### 3.4. 担当業務\n\n1. (主に私1名) データ作成月次作業向けワークフロー構築\n1. (4名) データレイク調査\n1. (4名) データ抽出クエリ作成\n1. (リーダーと私の2名) レビュー\n1. (4名) 検証\n1. (4名) 保守\n1. (4名) 月次運用作業\n\n### 3.5. 機能開発・実装詳細\n\nデータマート構成のためのクエリは Juupyter Notebook 上から Python API 経由で実行していましたが、2023年秋頃から dbt Core を導入し SQL ファイルベースへ置き替えつつある状況でした。\n\n- [旧環境] Snowflake の Python API 利用 (Jupyter Notebook にて管理)\n    - Snowflake Python API を Jupyter Notebook から実行します。\n        - ファイル数が増えたりコード量が増えるとコードの見通しが悪くなりやすい欠点があります。\n    - ワークフローは MWAA にて構築しています。\n- [新環境] dbt Core 利用 (SQL ファイルベース)\n    - dbt Core により SQL ファイル主体で管理を行います。\n        - 入出力の依存関係が明示され管理が容易になります。\n        - CI/CD、自動テスト、自動ドキュメント生成など現代的な開発・運用が可能となります。\n        - 必要に応じて増分データのみを対象とするクエリに変更できます。\n\n### 3.6. 目的・背景\n\n- データレイクは充実しているものの、機械学習や顧客情報分析に利用できるデータマートは発展途上のため適宜追加していく必要がありました。\n\n### 3.7. 課題\n\n- 分析に利用できる特徴量が不足している状況でした。\n- 従来作成していた特徴量が上流データの仕様変更や不具合によって作ることができない場合がありました。\n- Jupyter Notebook で管理しているデータマート向けプログラムが長大なため不具合発生時の原因究明に時間が掛かることが多くありました。\n- 上流データが全て揃ったタイミングでデータマートの月次更新を行っておりましたが、一部情報をできるだけ早く更新してほしいと言われるようになりました。\n\n### 3.8. 工夫した点\n\n> - 分析に利用できる特徴量が不足している状況でした。\n> - 従来作成していた特徴量が上流データの仕様変更や不具合によって作ることができない場合がありました。\n\n- ユーザーアンケートにより整備すべきデータを決定し、より必要とされるデータマートを目指しました。\n- できるだけ早くデータを提供できるような上流データを選定しつつ、上流データの障害発生率を調査し取捨選択を行いました。信頼性の高いデータマート運用のために設計時に十分考慮を行いました。\n\n> - Jupyter Notebook で管理しているデータマート向けプログラムが長大なため不具合発生時の原因究明に時間が掛かることが多くありました。\n> - 上流データが全て揃ったタイミングでデータマートの月次更新を行っておりましたが、一部情報をできるだけ早く更新してほしいと言われるようになりました。\n\n- いずれも解消できるポテンシャルをもつ dbt に移行することとしました。\n\n### 3.9. 成果\n\n- ユーザー目線での改善を続けたことでデータマートのアクセス数増加につながり、部内の大きな成果として表彰を受けました。\n- 自チーム・他チームともに顧客行動予測を行っており、そのために必要な特徴量を自力で作成し社内の多様なモデルの精度向上に貢献できました。\n- dbt 移行を推進することでソースコードを SELECT 文中心の理解しやすいものに置き換えることができました。\n- 上流データが追加されたタイミングで必要に応じてデータ作成処理を行える (セマンティックレイヤ対応ができる) ように dbt 環境に移行を順次進めることができています。\n    - セマンティックレイヤ対応は dbt Core では非対応のため dbt Cloud 導入時の対応となります。\n\n### 3.10. 担当フェーズ\n\n- 要件分析\n- 基本設計\n- 詳細設計\n- 開発\n- テスト\n- 運用\n- 保守\n\n### 3.11. 開発環境\n\n- AWS\n    - CodeCommit\n    - Cloud9\n    - Secrets Manager\n    - SageMaker\n    - MWAA\n    - EKS\n    - ECS\n- SQL\n    - Snowflake\n    - dbt\n- Python 実行環境\n    - SageMaker (conda_python3)\n    - JupyterHub (conda_python3)\n\n## 4. 情報通信企業向け 機械学習ワークフローのクラウドシフト\n\n### 4.1. 概要\n\n- オンプレ基盤で実施していた顧客行動予測モデル作成 (50モデル分) ワークフローのクラウドシフト\n\n### 4.2. 期間\n\n- [2022/07 - 2022/10] 28モデル分\n- [2022/11 - 2023/03] 22モデル分\n\n### 4.3. 規模・役割\n\n- 規模：4名\n- 役割：メンバー\n\n### 4.4. 担当業務\n\n1. (私1名) ワークフロー設計・実装\n1. (私1名) 各ジョブ設計\n1. (4名) 各ジョブ実装\n1. (4名) 上流データ調査\n1. (4名) 機械学習用データ作成クエリの再構成\n1. (4名) 検証\n1. (4名) 保守\n\n### 4.5. 機能開発・実装詳細\n\nMWAA (Airflow) + EKS + Kubernetes + Papermill な Python 実行環境が構築済みのため以下の要領で実装を行いました。\n\n- MWAA ワークフローを設計し DAG ファイルとして実装\n    - 大まかにはモデル共通処理を実行した後、モデル固有の処理を並列で実行する流れです。\n- Snowflake Python API と DataRobot API を実行する Python コード (Jupyter Notebook) を各ジョブの設計内容に応じて作成\n    - 機械学習用データ作成・モデリング・スコアリング・モデル評価指標取得などの処理を実装します。\n\n### 4.6. 目的・背景\n\n- 従来の基盤の廃止に伴い AWS 基盤にて機械学習ワークフローを構築する必要がありました。\n\n### 4.7. 課題\n\n- 上流データは仕様が変わりつつ移行済みだったため、従来基盤で利用していたクエリと同等のものを作るには調査・検証の時間を大きく取る必要がありました。\n- MWAA と DataRobot に関するノウハウがチーム内になく、自力で調査をしつつ基盤担当者から情報提供を受けながら取り組む必要がありました。\n\n### 4.8. 工夫した点\n\n- MWAA (Airflow) + EKS + Kubernetes + Papermill の構成で並列処理に強いことを利用し、並列処理を最大限活用できるようにジョブの粒度を調整しました。\n- 移行対象のクエリの量が膨大かつ移行先上流データがどれか分からない状況だったため、初期調査段階では件数比較を活用しある程度当たりを付ける方法で効率的に設計を進めました。\n    - 最終的にはレコードの一致率確認を行っていますが、初めから一致率確認をしていると時間が足りなかったと思われます。\n- MWAA による機械学習ワークフロー構築時に従来手動で実施していた検証処理も含め、最終的に Slack 通知確認で完了するように作業を簡素化することで単純な移行ではなく価値を生むことを意識しました。\n\n### 4.9. 成果\n\n- 従来と同等のワークフローを維持しつつ、自動化と時短の工夫を入れることで大幅に運用工数を減らすことができました。\n\n### 4.10. 担当フェーズ\n\n- 要件分析\n- 基本設計\n- 詳細設計\n- 開発\n- テスト\n- 保守\n- 運用\n\n### 4.11. 開発環境\n\n- AWS\n    - SageMaker\n    - CodeCommit\n    - Secrets Manager\n    - MWAA\n    - EKS\n    - ECS\n- SQL\n    - Snowflake\n- Python 実行環境\n    - SageMaker (conda_python3)\n    - JupyterHub (conda_python3)\n- AI プラットフォーム\n    - DataRobot\n\n## 5. 小売企業向け 客数予測処理実行環境構築\n\n### 5.1. 概要\n\n- オンプレ基盤で実施していた客数予測処理の AWS 環境移行\n\n### 5.2. 期間\n\n- 2022/05 - 2022/06\n\n### 5.3. 規模・役割\n\n- 1名\n- メンバー\n\n### 5.4. 担当業務\n\n- 予測処理実行環境構築 (EC2, Python)\n- 環境変更に伴う Python コード修正・スクリプト作成\n- 予測処理実行手順構築\n\n### 5.5. 機能開発・実装詳細\n\n1. EC2 に Anaconda をインストールしベイズ統計モデル作成環境を構築します。\n1. 顧客の要求により客数予測に費せる日数が4日程度のためその範囲内で十分終了するよう処理の並列化を行います。\n\n### 5.6. 目的・背景\n\n- (前提) PoC として1店舗毎にベイズ統計モデルで客数予測を行うプログラムが作成されており、客数予測処理は1店舗あたり4時間程度かかる状況でした。\n    - その上で4日程度で約200店舗分の客数予測を出す環境構築を求められていました。\n    - インスタンス性能を上げるための AWS 移行となります。\n\n### 5.7. 課題\n\n- 要求を満たすためには EC2 高性能インスタンスを利用する必要がありコストは最小限とする必要がありました。\n- 前任者の作成した並列処理に問題があり総実行時間が長くなってしまいまう。\n- 経験の浅い作業者に運用を直ちに引き継ぐことになっていたため、手動実行するプロセスを挟むと不具合や遅延が想定されました。\n\n### 5.8. 工夫した点\n\n- 前任者の作成していた並列処理は先にコア数に基づきジョブを分割する形式のシェルスクリプトで構成していましたが、各店舗毎にデータ量が異なるため予測処理が早めに終了して遊びの出るコアが発生してしまっていました。\n    - 改善のため xargs に並列処理を管理させることで空きコアに逐次ジョブを実行させる構成に改善させ総実行時間を短縮させることができました。\n\n### 5.9. 成果\n\n- 当初の構成に比べて総実行時間を短縮することができ EC2 インスタンス利用時間の削減に成功しました。\n- 総実行時間は2日程度に抑えることができ、顧客要求を満たすことができました。\n- 利用可能なリソースが EC2 のみという制約の中、スクリプトを活用し極力自動化し引継ぎ後の業務負荷を軽減させました。\n\n### 5.10. 担当フェーズ\n\n- 要件分析\n- 基本設計\n- 詳細設計\n- 開発\n- テスト\n- 保守\n\n### 5.11. 開発環境\n\n- AWS\n    - EC2\n- SQL\n    - PostgreSQL\n- Git\n- Python 実行環境\n    - Python (公式)\n    - Anaconda\n- シェルスクリプト\n","srcMarkdownNoYaml":"\n\n:会社概要・雇用形態 (2024年時点) {#tbl-company tbl-colwidths=\"[20,80]\"}\n\n|              |                                                                                          |\n| :---         | :---                                                                                     |\n| 事業内容     | アプリケーション開発・インフラ構築事業、クラウド構築事業、データ分析・AI事業、DX支援事業 |\n| 資本金       | 2500万円                                                                                 |\n| 売上高       | 7億5,351万円                                                                             |\n| 従業員数     | 39名                                                                                     |\n| 上場／非上場 | 非上場                                                                                   |\n| 雇用形態     | 正社員                                                                                   |\n| 勤務地       | 北海道札幌市<br>週に約4回リモートワーク実施                                              |\n\n<!--\n**入社動機**\n- 未経験ながら数学的素養を活かしてデータ分析業務に取り組むイメージが湧いたため。\n    - 実際にはデータ分析ではなくデータエンジニアとして案件に入ることになりましたが、面白さを感じられて膨大な知識量が必要でやりがいのある分野だと感じました。\n\n**退職動機**\n- 案件先での業務経験はとても魅力的でしたが、そこでの働く限り会社軸での評価を得られず、昇給・昇進ができないためモチベーションを維持できない状況になりました。\n- たった1年程度の経験でデータ基盤に関して社内で有数の知見を持つ人間となってしまいました。周囲のレベルの高い成長できる環境を選びたいと感じました。\n-->\n\n以下、新しい順にプロジェクトを記載しております。\n\n## 1. プロジェクト以外の業務\n\n### 1.1. 新卒採用一次選考の面接官対応\n\n- 2024年新卒採用：学生6名分\n- 2025年新卒採用：学生6名分\n\n### 1.2. データ分析業務担当者育成\n\n1. 育成用プログラム進捗管理 (2023/06 - 2023/12)\n    - 利用教材：[データサイエンス100本ノック](https://github.com/The-Japan-DataScientist-Society/100knocks-preprocess)\n    - 育成対象者：7名 (2023年度)\n    - 業務：環境構築手順作成・質疑応答対応・作業進捗管理 (すべて私1名で対応)\n1. ローカル上の環境構築手順の共有 (随時)\n    - 社内 Wiki にて記事作成\n    - 具体例\n        - Amazon Linux (EC2) + Anaconda + PyStan 環境構築\n        - Windows + Anaconda + PyStan 環境構築\n        - Ubuntu (WSL2) + Docker (Dockerfile) + CPython + venv 環境構築\n        - Ubuntu (WSL2) + Docker 環境構築 (データサイエンス100本ノック向け)\n        - Amazon Linux (Cloud9) + pyenv 環境構築\n        - VSCode と Vim での Linter Formatter 導入方法\n1. データ分析関連技術情報共有 (随時)\n    - ニュースサイト・技術ブログ・技術コミュニティにて情報収集し、社内チャットにて随時共有\n\n## 2. 情報通信企業向け 機械学習ワークフローと AI プラットフォーム移管\n\n### 2.1. 概要\n\n- DataRobot 中心で構築していた機械学習ワークフローから Snowpark ML (Snowflake) 中心の構築への移管\n\n### 2.2. 期間\n\n1. [2023/12 - 2024/01] Snowpark ML 事前検証\n1. [2024/02 - 2024/03] 追加調査・ワークフロー設計\n\n### 2.3. 規模・役割\n\n- [2023/12 - 2024/01]\n    - 役割：メンバー\n    - 規模：1名 (私)\n- [2024/02 - 2024/03]\n    - 役割：リーダー\n    - 規模：2名\n        - 自社の若手2名\n\n### 2.4. 担当業務\n\n1. [2023/12 - 2024/01] (私1名) Snowpark ML の事前検証\n1. [2024/02 - 2024/03] (2名) DataRobot から Snowpark ML への移管のための追加調査\n1. [2024/03] (私1名) ワークフロー設計\n\n### 2.5. 機能開発・実装詳細\n\n移管前後の構築詳細は以下の通りです。\n\n- 移管前構築 (AWS MWAA + ECS + DataRobot + Snowflake)\n    - MWAA にてワークフロー管理を行っており DAG ファイルにてジョブを定義し並列処理や直列処理を記述していました。\n    - MWAA KubernetesPodOperator にて利用する ECS イメージを JupyterHub (ノートブック実行環境) でも共有していたため本番と開発でライブラリ依存関係の齟齬がない環境でした。\n    - AI プラットフォームとして DataRobot を採用し、ハイパーパラメータチューニングやモデル評価を全てフルマネージドで実施させていました。ただしコストが嵩む問題がありました。\n- 移管後構築 (AWS SageMaker + Snowpark ML + Snowflake)\n    - AI プラットフォームとして Snowpark ML を採用することとしました。使用感は scikit-learn に近く、ラベルエンコーディング・ハイパーパラメータチューニング・モデル評価を自力で実装する必要があります。\n    - ワークフローは \"SageMaker + Papermill\" でノートブック上での管理となります。\n    - モデルはモデルレジストリ機能にて管理させます。\n    - 他部署 (他の環境) とも共有できるように素朴な実装を目指しました。\n\n### 2.6. 目的・背景\n\n- コスト上の問題から DataRobot の利用を2024年8月に停止するという判断を受けて AI プラットフォームの移行先を探す必要がありました。\n\n### 2.7. 課題\n\n- 移行業務は付加価値を生みづらい都合で移行先調査の優先順位が低くなってしまい、分析基盤管理側の社員も移行先調査がほとんど実施できていない状況でした。\n- Snowpark ML は新しいサービスのため公式ドキュメント以外で参照出来る情報が社内外ともにかなり限られている状況でした。\n\n### 2.8. 工夫した点\n\n- 調査作業での工夫点\n    - 後から続く方が参照しやすいように調査記録を丁寧に取りました。\n        - Snowflake 公式のリポジトリに置かれているサンプルコードや公式ドキュメント・公式ライブラリソースコードのどの部分を参照したか記録に残しました。\n        - 調査記録を客先社内公開済み。\n    - 必要最低限の領域までの調査に留めることで、スケジュールや実装方針について予定より早く合意を取ることができました。\n        - 関係者が多くなるため情報提供をいち早く行うことを優先しました。\n\n### 2.9. 成果\n\n- Snowpark ML の利用は前例が少なかったため Snowflake 社からの個別開示情報などを利用して情報収集と事前検証を行ないました。結果、既存ワークフローに比べてコスト・性能面・セキュリティ面で優位性があることを示し、客先での先行事例を作ることができました。\n    - 価値を生みづらいと見込まれていた移管作業の意義を示したため、注目度を上げ、周囲を巻き込むことに成功しました。客先での社内政治的にも Snowpark ML 導入推進の話を通しやすくなる状況作りに貢献しました。\n- 本プロジェクトではリーダーとして技術調査・スケジュール策定・チームへの作業指示・顧客他部署への情報共有など多様な役割を担うことができました。\n\n### 2.10. 担当フェーズ\n\n- 要件分析\n- 基本設計\n- 詳細設計\n- 開発\n- テスト\n\n### 2.11. 開発環境\n\n- AWS\n    - SageMaker\n    - CodeCommit\n    - Secrets Manager\n- SQL\n    - Snowflake\n- Python 実行環境\n    - SageMaker (conda_python3)\n- AI プラットフォーム\n    - Snowpark ML\n\n## 3. 情報通信企業向け データマート整備\n\n### 3.1. 概要\n\n顧客情報と紐付けて分析や機械学習に利用するための下記特徴量の作成\n\n- ポイントサービス加盟店と顧客推定住所との距離\n- ポイントサービス詳細情報\n- 決済情報\n- 様々な特徴量を次元圧縮して生成する特徴量\n- 行動履歴からルールベースで推定されたライブイベント実績\n\n### 3.2. 期間\n\n1. [2023/04 - 2023/05] ポイントサービス加盟店と顧客推定住所との距離\n1. [2023/06 - 2023/07] 決済情報\n1. [2023/08 - 2023/09] 行動履歴からルールベースで推定されたライフイベント実績\n1. [2023/10 - 2023/12] 様々な特徴量を次元圧縮して生成する特徴量\n1. [2024/01 - 2024/03] ポイントサービス詳細情報\n\n### 3.3. 規模・役割\n\n- 役割：サブリーダー\n- 規模：4名\n\n### 3.4. 担当業務\n\n1. (主に私1名) データ作成月次作業向けワークフロー構築\n1. (4名) データレイク調査\n1. (4名) データ抽出クエリ作成\n1. (リーダーと私の2名) レビュー\n1. (4名) 検証\n1. (4名) 保守\n1. (4名) 月次運用作業\n\n### 3.5. 機能開発・実装詳細\n\nデータマート構成のためのクエリは Juupyter Notebook 上から Python API 経由で実行していましたが、2023年秋頃から dbt Core を導入し SQL ファイルベースへ置き替えつつある状況でした。\n\n- [旧環境] Snowflake の Python API 利用 (Jupyter Notebook にて管理)\n    - Snowflake Python API を Jupyter Notebook から実行します。\n        - ファイル数が増えたりコード量が増えるとコードの見通しが悪くなりやすい欠点があります。\n    - ワークフローは MWAA にて構築しています。\n- [新環境] dbt Core 利用 (SQL ファイルベース)\n    - dbt Core により SQL ファイル主体で管理を行います。\n        - 入出力の依存関係が明示され管理が容易になります。\n        - CI/CD、自動テスト、自動ドキュメント生成など現代的な開発・運用が可能となります。\n        - 必要に応じて増分データのみを対象とするクエリに変更できます。\n\n### 3.6. 目的・背景\n\n- データレイクは充実しているものの、機械学習や顧客情報分析に利用できるデータマートは発展途上のため適宜追加していく必要がありました。\n\n### 3.7. 課題\n\n- 分析に利用できる特徴量が不足している状況でした。\n- 従来作成していた特徴量が上流データの仕様変更や不具合によって作ることができない場合がありました。\n- Jupyter Notebook で管理しているデータマート向けプログラムが長大なため不具合発生時の原因究明に時間が掛かることが多くありました。\n- 上流データが全て揃ったタイミングでデータマートの月次更新を行っておりましたが、一部情報をできるだけ早く更新してほしいと言われるようになりました。\n\n### 3.8. 工夫した点\n\n> - 分析に利用できる特徴量が不足している状況でした。\n> - 従来作成していた特徴量が上流データの仕様変更や不具合によって作ることができない場合がありました。\n\n- ユーザーアンケートにより整備すべきデータを決定し、より必要とされるデータマートを目指しました。\n- できるだけ早くデータを提供できるような上流データを選定しつつ、上流データの障害発生率を調査し取捨選択を行いました。信頼性の高いデータマート運用のために設計時に十分考慮を行いました。\n\n> - Jupyter Notebook で管理しているデータマート向けプログラムが長大なため不具合発生時の原因究明に時間が掛かることが多くありました。\n> - 上流データが全て揃ったタイミングでデータマートの月次更新を行っておりましたが、一部情報をできるだけ早く更新してほしいと言われるようになりました。\n\n- いずれも解消できるポテンシャルをもつ dbt に移行することとしました。\n\n### 3.9. 成果\n\n- ユーザー目線での改善を続けたことでデータマートのアクセス数増加につながり、部内の大きな成果として表彰を受けました。\n- 自チーム・他チームともに顧客行動予測を行っており、そのために必要な特徴量を自力で作成し社内の多様なモデルの精度向上に貢献できました。\n- dbt 移行を推進することでソースコードを SELECT 文中心の理解しやすいものに置き換えることができました。\n- 上流データが追加されたタイミングで必要に応じてデータ作成処理を行える (セマンティックレイヤ対応ができる) ように dbt 環境に移行を順次進めることができています。\n    - セマンティックレイヤ対応は dbt Core では非対応のため dbt Cloud 導入時の対応となります。\n\n### 3.10. 担当フェーズ\n\n- 要件分析\n- 基本設計\n- 詳細設計\n- 開発\n- テスト\n- 運用\n- 保守\n\n### 3.11. 開発環境\n\n- AWS\n    - CodeCommit\n    - Cloud9\n    - Secrets Manager\n    - SageMaker\n    - MWAA\n    - EKS\n    - ECS\n- SQL\n    - Snowflake\n    - dbt\n- Python 実行環境\n    - SageMaker (conda_python3)\n    - JupyterHub (conda_python3)\n\n## 4. 情報通信企業向け 機械学習ワークフローのクラウドシフト\n\n### 4.1. 概要\n\n- オンプレ基盤で実施していた顧客行動予測モデル作成 (50モデル分) ワークフローのクラウドシフト\n\n### 4.2. 期間\n\n- [2022/07 - 2022/10] 28モデル分\n- [2022/11 - 2023/03] 22モデル分\n\n### 4.3. 規模・役割\n\n- 規模：4名\n- 役割：メンバー\n\n### 4.4. 担当業務\n\n1. (私1名) ワークフロー設計・実装\n1. (私1名) 各ジョブ設計\n1. (4名) 各ジョブ実装\n1. (4名) 上流データ調査\n1. (4名) 機械学習用データ作成クエリの再構成\n1. (4名) 検証\n1. (4名) 保守\n\n### 4.5. 機能開発・実装詳細\n\nMWAA (Airflow) + EKS + Kubernetes + Papermill な Python 実行環境が構築済みのため以下の要領で実装を行いました。\n\n- MWAA ワークフローを設計し DAG ファイルとして実装\n    - 大まかにはモデル共通処理を実行した後、モデル固有の処理を並列で実行する流れです。\n- Snowflake Python API と DataRobot API を実行する Python コード (Jupyter Notebook) を各ジョブの設計内容に応じて作成\n    - 機械学習用データ作成・モデリング・スコアリング・モデル評価指標取得などの処理を実装します。\n\n### 4.6. 目的・背景\n\n- 従来の基盤の廃止に伴い AWS 基盤にて機械学習ワークフローを構築する必要がありました。\n\n### 4.7. 課題\n\n- 上流データは仕様が変わりつつ移行済みだったため、従来基盤で利用していたクエリと同等のものを作るには調査・検証の時間を大きく取る必要がありました。\n- MWAA と DataRobot に関するノウハウがチーム内になく、自力で調査をしつつ基盤担当者から情報提供を受けながら取り組む必要がありました。\n\n### 4.8. 工夫した点\n\n- MWAA (Airflow) + EKS + Kubernetes + Papermill の構成で並列処理に強いことを利用し、並列処理を最大限活用できるようにジョブの粒度を調整しました。\n- 移行対象のクエリの量が膨大かつ移行先上流データがどれか分からない状況だったため、初期調査段階では件数比較を活用しある程度当たりを付ける方法で効率的に設計を進めました。\n    - 最終的にはレコードの一致率確認を行っていますが、初めから一致率確認をしていると時間が足りなかったと思われます。\n- MWAA による機械学習ワークフロー構築時に従来手動で実施していた検証処理も含め、最終的に Slack 通知確認で完了するように作業を簡素化することで単純な移行ではなく価値を生むことを意識しました。\n\n### 4.9. 成果\n\n- 従来と同等のワークフローを維持しつつ、自動化と時短の工夫を入れることで大幅に運用工数を減らすことができました。\n\n### 4.10. 担当フェーズ\n\n- 要件分析\n- 基本設計\n- 詳細設計\n- 開発\n- テスト\n- 保守\n- 運用\n\n### 4.11. 開発環境\n\n- AWS\n    - SageMaker\n    - CodeCommit\n    - Secrets Manager\n    - MWAA\n    - EKS\n    - ECS\n- SQL\n    - Snowflake\n- Python 実行環境\n    - SageMaker (conda_python3)\n    - JupyterHub (conda_python3)\n- AI プラットフォーム\n    - DataRobot\n\n## 5. 小売企業向け 客数予測処理実行環境構築\n\n### 5.1. 概要\n\n- オンプレ基盤で実施していた客数予測処理の AWS 環境移行\n\n### 5.2. 期間\n\n- 2022/05 - 2022/06\n\n### 5.3. 規模・役割\n\n- 1名\n- メンバー\n\n### 5.4. 担当業務\n\n- 予測処理実行環境構築 (EC2, Python)\n- 環境変更に伴う Python コード修正・スクリプト作成\n- 予測処理実行手順構築\n\n### 5.5. 機能開発・実装詳細\n\n1. EC2 に Anaconda をインストールしベイズ統計モデル作成環境を構築します。\n1. 顧客の要求により客数予測に費せる日数が4日程度のためその範囲内で十分終了するよう処理の並列化を行います。\n\n### 5.6. 目的・背景\n\n- (前提) PoC として1店舗毎にベイズ統計モデルで客数予測を行うプログラムが作成されており、客数予測処理は1店舗あたり4時間程度かかる状況でした。\n    - その上で4日程度で約200店舗分の客数予測を出す環境構築を求められていました。\n    - インスタンス性能を上げるための AWS 移行となります。\n\n### 5.7. 課題\n\n- 要求を満たすためには EC2 高性能インスタンスを利用する必要がありコストは最小限とする必要がありました。\n- 前任者の作成した並列処理に問題があり総実行時間が長くなってしまいまう。\n- 経験の浅い作業者に運用を直ちに引き継ぐことになっていたため、手動実行するプロセスを挟むと不具合や遅延が想定されました。\n\n### 5.8. 工夫した点\n\n- 前任者の作成していた並列処理は先にコア数に基づきジョブを分割する形式のシェルスクリプトで構成していましたが、各店舗毎にデータ量が異なるため予測処理が早めに終了して遊びの出るコアが発生してしまっていました。\n    - 改善のため xargs に並列処理を管理させることで空きコアに逐次ジョブを実行させる構成に改善させ総実行時間を短縮させることができました。\n\n### 5.9. 成果\n\n- 当初の構成に比べて総実行時間を短縮することができ EC2 インスタンス利用時間の削減に成功しました。\n- 総実行時間は2日程度に抑えることができ、顧客要求を満たすことができました。\n- 利用可能なリソースが EC2 のみという制約の中、スクリプトを活用し極力自動化し引継ぎ後の業務負荷を軽減させました。\n\n### 5.10. 担当フェーズ\n\n- 要件分析\n- 基本設計\n- 詳細設計\n- 開発\n- テスト\n- 保守\n\n### 5.11. 開発環境\n\n- AWS\n    - EC2\n- SQL\n    - PostgreSQL\n- Git\n- Python 実行環境\n    - Python (公式)\n    - Anaconda\n- シェルスクリプト\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":2,"output-file":"03-cnsh.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","date-format":"iso","theme":{"light":"flatly","dark":"darkly"},"toc-title":"TOC","toc-location":"right","title":"職務経歴 株式会社シイエヌエス北海道","date":"last-modified"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}